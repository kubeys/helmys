#!/usr/bin/env ys-0

# This is program provides a way to use YS (YAMLScript) for Helm templating.
# See https://github.com/kubeys/helmys for full details.

HELMYS-VERSION =: '0.1.5'

# When helmys is called with no args it is assumed to be a post renderer and
# will read from stdin.
#
# When called with args, it is a CLI utility. Currently its only function is to
# initialize YS support in an existing Helm chart.
defn main:
  # No args. Do post-render:
  (): post-render()
  # Got args. Do init or proxy to helm:
  (cmd *args):
    condp eq cmd:
      'init':
        do-init: args*

      'install'  : helm-with-post-renderer(cmd args*)
      'template' : helm-with-post-renderer(cmd args*)
      'upgrade'  : helm-with-post-renderer(cmd args*)

      # TODO: Add 'update' support.

      '--version':
        say: "helmys v$HELMYS-VERSION"

      '-h': print-help()
      '--help': print-help()

      else:
        die: "Invalid helmys subcommand: '$cmd'"

defn print-help():
  say: |

    helmys - YS (YAMLScript) tool for Helm chart templates

    The 'helmys' command is a Helm post-renderer that allows you to use YS code
    in your Helm charts. See https://yamlscript.org/helmys for more info.

    Usage: helm <cmd> <args> --post-renderer=helmys
       or: helmys [<cmd>] [<arg...>]

    When called with no arguments, helmys acts as a post-renderer converting
    YAML templates containing YS code from stdin, to YAML ready for Kubernetes.

    The helmys command can also be used as a handy short form for the helm
    commands that have a '--post-renderer' option.
    Just change 'helm' to 'helmys' in your command and you can skip typing
    the '--post-renderer=helmys' option at the end.

    Commands:

      install       Shortcut for 'helm install <args> --post-renderer=helmys'
      template      Shortcut for 'helm template ...'
      upgrade       Shortcut for 'helm upgrade ...'

      -h, --help    Print this help and exit
      -v, --version Print the helmys command version and exit


# Initialize a Helm chart by adding 2 helmys template files.
# Error if chart dir is not actually a Helm chart or is already initialized.
defn do-init:
  # 'helmys init' expects no extra args:
  (_ *xs):
    die: |
      Invalid usage.
      Expected 'helmys init <chart-dir>'

  (chart):
    # Check that dir is an uninitialized Helm chart:
    when-not fs-d("$chart/templates"):
      die: "'$chart' is not a chart directory"
    when fs-f("$chart/bin/helmys"):
      die: "'$chart' is not a chart directory"

    templates =: "$chart/templates"
    when fs-f("$templates/helmys.yaml"):
      die: "'$chart' already initialized"

    # Ininitialize the Helm chart:
    if ENV.HELMYS_TEST:
      # Init with local files for `make test`:
      then:
        write "$templates/helmys.yaml":
          read: 'templates/helmys.yaml'
        write "$templates/helpers.yaml":
          read: 'templates/helpers.yaml'

      else:
        # Init with files from source repository:
        raw =: "https://raw.githubusercontent.com/\
                kubeys/helmys/refs/heads/main"
        write "$templates/helmys.yaml":
          curl: "$raw/templates/helmys.yaml"
        write "$templates/helpers.yaml":
          curl: "$raw/templates/helpers.yaml"

# Make a regex to find a chart by name:
defn template-re(name):
  name .=: replace('.' '\.')
  qr: "^# Source:\ .*/templates/$name"

defn post-render():
  # Read rendered YAML from Helm:
  yaml-in =: read(IN)

  # Write input if HELMYS_DEBUG_INPUT set:
  when-let file ENV.HELMYS_DEBUG_INPUT:
    write file: yaml-in

  # Split YAML stream into docs:
  yaml-docs =:
    yaml-in
      .split(/(?m)^---\n/):rest
  # Find helmys.yaml doc:
  helmys-doc =:
    yaml-docs
      .filter(template-re('helmys.yaml')):first
  # Find helpers.yaml doc:
  helpers-doc =:
    yaml-docs
      .filter(template-re('helpers.yaml')):first

  # Find the helmys charts and put them at the start of the stream.
  # They define things needed by YS in Helm templates.
  yaml-thru =:
    if not(helmys-doc) || not(helpers-doc):
      # Setting the HELMYS_PASSTHRU environment variable allows helmys to be
      # used as a post-renderer even when the chart doesn't use HelmYS at all.
      # This is to support the helm command being wrapped in a way that always
      # uses `--post-renderer=helmys` so that you can use `helm install` on any
      # chart without needing to knw in advance if it uses HelmYS for
      # templating.
      if not(ENV.HELMYS_PASSTHRU):
        die: |
          HelmYS templates missing for `--post-renderer=helmys`.
          Set `export HELMYS_PASSTHRU=1` to allow any chart to install.
        else:
          yaml-in

      else:
        # Remove helmys templates from the input stream:
        helm-docs =: yaml-docs.remove(template-re('helmys.yaml'))
        helm-docs =: helm-docs.remove(template-re('helpers.yaml'))

        # TODO - Warn if a document looks like a YS template but is missing
        # !YS-v0:

        # Re-add the helmys templates to the start of the stream:
        join "\n---\n":
          helm-docs
            .cons(helpers-doc)
            .cons(helmys-doc)

  # Write thruput if HELMYS_DEBUG_THRUPUT set:
  when-let file ENV.HELMYS_DEBUG_THRUPUT:
    write file: yaml-thru

  # Generate the final YAML output by using YS to evaluate the now
  # adjusted input stream.
  yaml-out =:
    try:
      yaml/dump-all:
        ys/eval-stream: yaml-thru
      catch e:
        die: "helmys failed to render YS helm templates:\n$e"

  # Assert that the final output is not empty:
  when yaml-out.!:
    die: "helmys produced no output from YS helm templates"

  # Write output if HELMYS_DEBUG_OUTPUT set:
  when-let file ENV.HELMYS_DEBUG_OUTPUT:
    write file: yaml-out

  # Write the final YAML output to STDOUT:
  print: yaml-out

defn helm-with-post-renderer(cmd *args):
  when args.some(\(/^--post-renderer/)):
    die: "Don't use the '--post-renderer' option with 'helmys'"

  command =: "helm $cmd $joins(args) --post-renderer helmys"
  warn: "+ $command"
  exec: command
