#!/usr/bin/env bash

# shellcheck disable=2016

# This is program provides a way to use YAMLScript for Helm templating.
# See https://github.com/yaml/helmys for full details.

set -euo pipefail
shopt -s inherit_errexit 2>/dev/null || true

main() (
  if [[ $# -eq 0 ]]; then
    post-render
  else
    cmd=${1-}; shift
    case "$cmd" in
      init)
        do-init "$@";;
      *)
        die "Invalid command: 'helmys $*'";;
    esac
  fi
)

do-init() (
  [[ $# -eq 1 ]] ||
    die "Invalid usage" \
        "Expected 'helmys init <chart-dir>'"

  chart=$1
  [[ -d $chart/templates ]] ||
    die "'$chart' is not a chart directory"
  [[ -f $chart/bin/helmys ]] &&
    die "'$chart' is not a chart directory"

  templates=$chart/templates
  [[ ! -f $templates/helmys.yaml &&
     ! -f $templates/helpers.ys
  ]] || die "'$chart' already initialized"

  if [[ ${HELMYS_TEST-} ]]; then
    cp templates/helmys.yaml "$templates"
  else
    raw='https://raw.githubusercontent.com/kubeys/helmys/refs/heads/main'
    curl -s -o "$templates/helmys.yaml" "$raw/templates/helmys.yaml"
  fi
)

post-render() (
  # Read rendered YAML from Helm:
  yaml=$(cat)

  # Write input if HELMYS_DEBUG_INPUT set:
  if [[ ${HELMYS_DEBUG_INPUT-} ]]; then
    echo "$yaml" > "$HELMYS_DEBUG_INPUT"
  fi

  # Enable YAMLScript code in the YAML and import the 'helpers.ys' library,
  # and the pipe to ys again to evaulate any YAMLScript code used:
  yaml=$(
    ys -e '
yaml-in =: slurp(IN)
yaml-docs =: yaml-in
               .split(/(?m)^---\n/):rest
helmys-doc =: yaml-docs
                .filter(/(?m)^Chart += *:/):first

if not(helmys-doc):
  if not(ENV.HELMYS_PASSTHROUGH):
    die: |
      No `templates/helmys.yaml` template found for `--post-renderer=helmys`.
      Set `export HELMYS_PASSTHROUGH=1` to allow any chart to install.
    else:
      print: yaml-in

  else:
    helm-docs =: yaml-docs
                   .remove(/(?m)^Chart += *:/)
    helm-docs =:
      map _ helm-docs:
        fn(doc):
          if ENV.HELMYS_AUTO_TAG:
            replace doc _:
              /(?m)^(?:--- +)?!yamlscript\/v0.*/
            else: doc
            # TODO warn if doc should have !yamlscript/v0:
    helm-docs =: helm-docs.cons(helmys-doc)
    print:
      if ENV.HELMYS_AUTO_TAG:
        helm-docs.join("\n--- !yamlscript/v0:\n")
        helm-docs.join("\n---\n")
' <<<"$yaml" |
    (
      if [[ ${HELMYS_DEBUG_THRUPUT-} ]]; then
        tee "$HELMYS_DEBUG_THRUPUT"
      else
        cat
      fi
    ) |
    ys -Ys -
  )

  # Make sure we have output, because helm's --post-renderer won't complain if
  # it gets no content back:
  [[ $yaml ]] ||
    die "helmys failed"

  # Print the evaluated content back to helm; tee into a file if requested:
  echo "$yaml" | (
    if [[ ${HELMYS_DEBUG_OUTPUT-} ]]; then
      tee "$HELMYS_DEBUG_OUTPUT"
    else
      cat
    fi
  )
)

die() { printf '%s\n' "$@" >&2; exit 1; }

main "$@"
