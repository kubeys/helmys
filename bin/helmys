#!/bin/bash

# shellcheck disable=2016

# This is program provides a way to use YAMLScript for Helm templating.
# See https://github.com/yaml/helmys for full details.

set -euo pipefail

main() (
  # Read rendered YAML from Helm:
  yaml=$(cat)
  if [[ ${HELMYS_INPUT-} ]]; then
    echo "$yaml" > "$HELMYS_INPUT"
  fi

  if [[ -z ${HELMYS_CHART-} ]]; then
    # Find chart path from yaml text:
    chart_path=$(
      <<<"$yaml" ys -e '
text =: IN:slurp
m =: text =~ qr("(?m)^# Source:\ (.*)/templates/helmys.yaml$")
when-not m:
  die: "templates/helmys.yaml not seen by helmys"
path =: m.1 ||| "."
say: path
'
    )
    [[ -e $chart_path/templates/helmys.yaml ]] ||
      die "Can't determine chart path." \
          "Please set HELMYS_CHART=<path/to/chart>"
    export HELMYS_CHART=$chart_path
  fi

  cd "$HELMYS_CHART" ||
    die "Can't cd to '$HELMYS_CHART'"

  # Get the instance name from the YAML:
  # XXX Can we get this a better way?
  HELM_RELEASE=$(
    <<<"$yaml" \
    ys - -e \
      'stream().filter(\(_.HELMYS)):first
               .dissoc("HELMYS"):json/dump:say'
  )

  # Make sure we got it:
  [[ $HELM_RELEASE ]] ||
    die "helmys Error: 'app.kubernetes.io/instance:' not found in YAML"

  # Enable YAMLScript code in the YAML and import the 'helpers.ys' library,
  # and the pipe to ys again to evaulate any YAMLScript code used:
  yaml=$(
    export HELM_RELEASE
    export YSPATH='./templates/'

    ys -e '
    slurp(IN)
      .split("\n---\n")
      .remove(\(_ =~ /(?m)^HELMYS:/))
      .remove(\(_ =~ /(?m)^Chart =:/))
      .join("\n---\n")
      .replace(qr("(?m)^!yamlscript/v0:.*\n"))
      .replace(/(?m)^:use helpers:.*\n/)
      .replace(/(?m)^---$/ "--- !yamlscript/v0:")
      .replace(/^(.*)\n/ "$1\n:use \"helpers\":\n")
      .print()
    ' <<<"$yaml" |
    ys -Ys -
  )

  # Make sure we have output, because helm's --post-renderer won't complain if
  # it gets no content back:
  [[ $yaml ]] ||
    die "helmys failed"

  # Print the evaluated content back to helm; tee into a file if requested:
  echo "$yaml" | (
    if [[ ${HELMYS_OUTPUT-} ]]; then
      tee "$HELMYS_OUTPUT"
    else
      cat
    fi
  )
)

die() { printf '%s\n' "$@" >&2; exit 1; }

main "$@"
