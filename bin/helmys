#!/usr/bin/env ys-0

# This is program provides a way to use YAMLScript for Helm templating.
# See https://github.com/kubeys/helmys for full details.

HELMYS-VERSION =: '0.1.2'

defn main(*args):
  if args.!:
    call: post-render
    else:
      cmd *args =: args
      condp eq cmd:
        'init':
          do-init: args*
        '--version':
          say: "helmys v$HELMYS-VERSION"
        else:
          die: "Invalid command: 'helmys $str(args)'"

defn do-init:
  ():
    die: |
      Invalid usage.
      Expected 'helmys init <chart-dir>'
  (_ *xs): do-init()

  (chart):
    when-not fs-d("$chart/templates"):
      die: "'$chart' is not a chart directory"
    when fs-f("$chart/bin/helmys"):
      die: "'$chart' is not a chart directory"

    templates =: "$chart/templates"
    when fs-f("$templates/helmys.yaml"):
      die: "'$chart' already initialized"

    if ENV.HELMYS_TEST:
      sh: "cp templates/helmys.yaml $templates"
      else:
        raw =: "https://raw.githubusercontent.com/\
                kubeys/helmys/refs/heads/main"
        sh: "curl -s -o $templates/helmys.yaml
               $raw/templates/helmys.yaml"

defn post-render():
  # Read rendered YAML from Helm:
  yaml-in =: slurp(IN)

  # Write input if HELMYS_DEBUG_INPUT set:
  when+ ENV.HELMYS_DEBUG_INPUT:
    spit: _ yaml-in

  yaml-docs =: yaml-in
                .split(/(?m)^---\n/):rest
  helmys-doc =: yaml-docs
                  .filter(/(?m)^Chart += *:/):first

  yaml-thru =:
    if not(helmys-doc):
      if not(ENV.HELMYS_PASSTHRU):
        die: |
          No `templates/helmys.yaml` template found for `--post-renderer=helmys`.
          Set `export HELMYS_PASSTHRU=1` to allow any chart to install.
        else:
          yaml-in

      else:
        helm-docs =: yaml-docs.remove(/(?m)^Chart += *:/)
        helm-docs =:
          map _ helm-docs:
            fn(doc):
              if ENV.HELMYS_AUTO_TAG:
                replace doc _ "":
                  /(?m)^(?:--- +)?!yamlscript\/v0.*/
                else: doc
                # TODO warn if doc should have !yamlscript/v0:
        helm-docs =: helm-docs.cons(helmys-doc)
        if ENV.HELMYS_AUTO_TAG:
          helm-docs.join("\n--- !yamlscript/v0:\n")
          helm-docs.join("\n---\n")

  # Write thruput if HELMYS_DEBUG_THRUPUT set:
  when+ ENV.HELMYS_DEBUG_THRUPUT:
    spit: _ yaml-thru

  yaml-out =:
    try:
      do:
        # XXX shell out to ys until std/eval-stream is available
        res =:
          sh {:in yaml-thru}: "ys -Ys -"
        when+ res.err.?:
          die: "helmys failed to render YAMLScript helm templates:\n$_"
        get res: :out
      catch e:
        die: "helmys failed to render YAMLScript helm templates:\n$e"

  when yaml-out.!:
    die: "helmys produced no output from YAMLScript helm templates"

  # Write output if HELMYS_DEBUG_OUTPUT set:
  when+ ENV.HELMYS_DEBUG_OUTPUT:
    spit: _ yaml-out

  print: yaml-out
